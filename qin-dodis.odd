<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Qin DOdis</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl/>
        </encodingDesc>
        <revisionDesc>
            <change when="2021-02-11+01:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="qin-dodis" source="teipublisher.odd"> <elementSpec ident="emph" mode="add">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="title" mode="change">
                    <model predicate="@type='sub'" behaviour="heading">
            <param name="level" value="3"/>
        </model>
                    <model predicate="@type='main'" behaviour="heading">
            <param name="level" value="1"/>
        </model>
                    <model predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' â€” '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence>
                    <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
                    <modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="persName" mode="add">
                    <model behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="id(substring-after(@ref,'#'),root(.))"/>
            <outputRendition xml:space="preserve">
            color: DarkBlue;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="dateline" mode="change">
                    <model behaviour="block">
            <outputRendition xml:space="preserve">
            text-align: right;
            </outputRendition>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="ref" mode="change">
                    <model predicate="parent::head" behaviour="link">
            <outputRendition xml:space="preserve">
            
            
            font-size: 19px;
text-align: right;
display: block;
            
            
            </outputRendition>
        </model>
                    <model predicate="not(@target)" behaviour="inline"/>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="link">
            <param name="uri" value="@target"/>
        </model>
                </elementSpec>
                <elementSpec ident="date" mode="change">
                    <model output="print" predicate="text()" behaviour="inline"/>
                    <model output="print" predicate="@when and not(text())" behaviour="inline">
            <param name="content" value="@when"/>
        </model>
                    <model output="web" predicate="@when" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="format-date(@when,'[FNn], [D1o] [MNn] [Y]')"/>
        </model>
                    <model predicate="text()" behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="person" mode="add">
                    <modelSequence>
            <model behaviour="block">
                <param name="content" value="persName[@type='full']"/>
            </model>
            <model behaviour="block">
                <param name="content" value="note/node()"/>
            </model>
        </modelSequence>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>